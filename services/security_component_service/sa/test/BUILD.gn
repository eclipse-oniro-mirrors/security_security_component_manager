# Copyright (c) 2023-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../security_component.gni")

sec_comp_root_dir = "../../../.."

ohos_unittest("sec_comp_service_test") {
  subsystem_name = "security"
  part_name = "security_component_manager"
  module_out_path = part_name + "/" + part_name
  include_dirs = [
    "${sec_comp_root_dir}/frameworks/common/include",
    "${sec_comp_root_dir}/frameworks/enhance_adapter/include",
    "${sec_comp_root_dir}/frameworks/security_component/include",
    "${sec_comp_root_dir}/interfaces/inner_api/security_component/include",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main",
    "${sec_comp_root_dir}/services/security_component_service/sa/test/mock/include",
  ]

  sources = [
    "${sec_comp_root_dir}/interfaces/inner_api/security_component/src/sec_comp_dialog_callback_stub.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/app_mgr_death_recipient.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/app_state_observer.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/delay_exit_task.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/first_use_dialog.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_comp_dialog_callback_proxy.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_comp_entity.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_comp_info_helper.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_comp_malicious_apps.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_comp_manager.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_comp_perm_manager.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_comp_service.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_comp_stub.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_event_handler.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/window_info_helper.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/test/mock/src/accesstoken_kit.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/test/mock/src/mock_app_mgr_proxy.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/test/mock/src/mock_iservice_registry.cpp",
    "unittest/src/app_state_observer_test.cpp",
    "unittest/src/sec_comp_entity_test.cpp",
    "unittest/src/sec_comp_info_helper_test.cpp",
    "unittest/src/sec_comp_manager_test.cpp",
    "unittest/src/sec_comp_perm_manager_test.cpp",
    "unittest/src/sec_comp_service_test.cpp",
    "unittest/src/sec_comp_stub_test.cpp",
    "unittest/src/service_test_common.cpp",
    "unittest/src/window_info_helper_test.cpp",
  ]

  configs = [ "${sec_comp_root_dir}/config:coverage_flags" ]
  cflags_cc = [ "-DHILOG_ENABLE" ]

  if (security_component_enhance_enable) {
    cflags_cc += [ "-DSECURITY_COMPONENT_ENHANCE_ENABLE" ]
  }

  deps = [
    "${sec_comp_root_dir}/frameworks:security_component_enhance_adapter_src_set",
    "${sec_comp_root_dir}/frameworks:security_component_framework_src_set",
    "//third_party/googletest:gmock_main",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_runtime:ability_manager",
    "ability_runtime:runtime",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "json:nlohmann_json_static",
    "window_manager:libdm",
  ]
}

ohos_unittest("sec_comp_service_mock_test") {
  subsystem_name = "security"
  part_name = "security_component_manager"
  module_out_path = part_name + "/" + part_name
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
  }
  branch_protector_ret = "pac_ret"
  include_dirs = [
    "${sec_comp_root_dir}/frameworks/common/include",
    "${sec_comp_root_dir}/frameworks/security_component/include",
    "${sec_comp_root_dir}/frameworks/enhance_adapter/include",
    "${sec_comp_root_dir}/interfaces/inner_api/security_component/include",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main",
    "${sec_comp_root_dir}/services/security_component_service/sa/test/mock/include",
  ]

  sources = [
    "${sec_comp_root_dir}/interfaces/inner_api/security_component/src/sec_comp_dialog_callback_stub.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/app_mgr_death_recipient.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/app_state_observer.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/delay_exit_task.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/first_use_dialog.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_comp_dialog_callback_proxy.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_comp_entity.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_comp_info_helper.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_comp_malicious_apps.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_comp_manager.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_comp_perm_manager.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_comp_service.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_comp_stub.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/sec_event_handler.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/sa_main/window_info_helper.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/test/mock/src/accesstoken_kit.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/test/mock/src/mock_app_mgr_proxy.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/test/mock/src/mock_iservice_registry.cpp",
    "${sec_comp_root_dir}/services/security_component_service/sa/test/mock/src/sec_comp_enhance_adapter.cpp",
    "unittest/src/first_use_dialog_test.cpp",
    "unittest/src/sec_comp_service_mock_test.cpp",
    "unittest/src/sec_comp_stub_mock_test.cpp",
    "unittest/src/service_test_common.cpp",
  ]

  configs = [ "${sec_comp_root_dir}/config:coverage_flags" ]
  cflags_cc = [ "-DHILOG_ENABLE" ]

  deps = [
    "${sec_comp_root_dir}/frameworks:security_component_framework_src_set",
    "//third_party/googletest:gmock_main",
  ]

  external_deps = [
    "ability_base:base",
    "ability_base:want",
    "ability_runtime:ability_manager",
    "ability_runtime:runtime",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "eventhandler:libeventhandler",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "hisysevent:libhisysevent",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "json:nlohmann_json_static",
    "window_manager:libdm",
  ]
}

group("unittest") {
  testonly = true
  deps = [
    ":sec_comp_service_mock_test",
    ":sec_comp_service_test",
  ]
}
